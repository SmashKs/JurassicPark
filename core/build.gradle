/*
 * MIT License
 *
 * Copyright (c) 2019 SmashKs
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import config.AndroidConfiguration
import config.Dependencies
import config.LibraryDependency
import resources.FeatureRes

android {
    compileSdkVersion AndroidConfiguration.COMPILE_SDK
    defaultConfig {
        minSdkVersion AndroidConfiguration.MIN_SDK
        targetSdkVersion AndroidConfiguration.TARGET_SDK
        testInstrumentationRunner AndroidConfiguration.TEST_INSTRUMENTATION_RUNNER
        consumerProguardFiles 'consumer-rules.pro'
    }
    buildTypes {
        release {
            minifyEnabled = true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
        debug {
            splits.abi.enable = false
            splits.density.enable = false
            aaptOptions.cruncherEnabled = false
            minifyEnabled = false
            // Only use this flag on builds you don't proguard or upload to beta-by-crashlytics.
            testCoverageEnabled = false
            ext.alwaysUpdateBuildId = false
            crunchPngs = false // Enabled by default for RELEASE build type
        }
    }
    sourceSets {
        main {
            res.srcDirs += FeatureRes.dirs
        }
    }
    dexOptions {
        jumboMode = true
        preDexLibraries = true
        threadCount = 8
    }
    packagingOptions {
        exclude "META-INF/atomicfu.kotlin_module"
        exclude "META-INF/kotlinx-coroutines-core.kotlin_module"
    }
    testOptions { unitTests.returnDefaultValues = true }
    lintOptions { abortOnError = false }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    viewBinding.enabled = true
}

androidExtensions {
    experimental = true
    defaultCacheImplementation = "SPARSE_ARRAY"
}

kapt {
    useBuildCache = true
    correctErrorTypes = true
    mapDiagnosticLocations = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api(Dependencies.kotlinDeps.values() + Dependencies.kotlinAndroidDeps.values())
    api(Dependencies.commonAndroidxDeps.values())
    api(Dependencies.diDeps.values())
    api(LibraryDependency.GSON)
}
